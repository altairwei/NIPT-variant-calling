#!/usr/bin/env python3
from snakemake.script import snakemake
import csv
from collections import defaultdict
import matplotlib.pyplot as plt
import pandas as pd

# Retrieve input stats files (pre-generated by samtools stats)
stats_files = snakemake.input  # e.g. list of stats.txt files

# Retrieve output file paths from snakemake object
# Expecting output fields: aggregated (TSV), line (line plot), and heatmap (heatmap image)
aggregated_file = snakemake.output.aggregated if hasattr(snakemake.output, "aggregated") else snakemake.output[0]
plot_file = snakemake.output.line if hasattr(snakemake.output, "line") else (snakemake.output[1] if len(snakemake.output) > 1 else None)
heatmap_file = snakemake.output.heatmap if hasattr(snakemake.output, "heatmap") else (snakemake.output[2] if len(snakemake.output) > 2 else None)

def parse_ffq_from_stats_file(stats_file):
    """
    Parse FFQ lines from a samtools stats output file.
    
    The FFQ lines have the format:
      FFQ    <cycle>    <count_q0>    <count_q1>    <count_q2>   ...
    where fields are tab-separated. The first field is "FFQ", the second is the cycle number,
    and subsequent fields are counts for quality scores starting from 0.
    
    Returns a list of tuples: (cycle, quality_counts) where quality_counts is a list of integers.
    """
    ffq_data = []
    with open(stats_file, 'r') as f:
        for line in f:
            if line.startswith("FFQ"):
                fields = line.strip().split("\t")
                if len(fields) < 3:
                    continue
                try:
                    cycle = int(fields[1])
                except ValueError:
                    continue
                try:
                    # Convert fields from the third column onward to integers.
                    quality_counts = [int(x) for x in fields[2:]]
                except ValueError:
                    continue
                ffq_data.append((cycle, quality_counts))
    return ffq_data

def aggregate_ffq(stats_files):
    """
    Aggregate FFQ data from multiple samtools stats output files.
    
    For each FFQ line, aggregate counts by cycle and quality score.
    
    Returns a dictionary with keys as (cycle, quality) and values as cumulative counts.
    """
    aggregated = defaultdict(int)
    for stats_file in stats_files:
        ffq_data = parse_ffq_from_stats_file(stats_file)
        for cycle, quality_counts in ffq_data:
            for quality, count in enumerate(quality_counts):
                aggregated[(cycle, quality)] += count
    return aggregated

def write_aggregated(aggregated, output_file):
    """
    Write the aggregated FFQ data to a TSV file.
    
    The output format is:
      cycle<TAB>quality<TAB>count
    """
    with open(output_file, 'w', newline='') as f:
        writer = csv.writer(f, delimiter='\t')
        writer.writerow(["cycle", "quality", "count"])
        for (cycle, quality) in sorted(aggregated.keys(), key=lambda x: (x[0], x[1])):
            writer.writerow([cycle, quality, aggregated[(cycle, quality)]])

# Main processing
aggregated = aggregate_ffq(stats_files)
write_aggregated(aggregated, aggregated_file)

# Create a DataFrame for plotting from aggregated data
data = [{"cycle": cycle, "quality": quality, "count": count}
        for (cycle, quality), count in aggregated.items()]
df = pd.DataFrame(data)
# Create a pivot table with cycles as rows and quality scores as columns (fill missing values with 0)
pivot_df = df.pivot(index='cycle', columns='quality', values='count').fillna(0)

if plot_file:
    # Plot a line chart for each cycle showing the quality score distribution
    plt.figure(figsize=(12, 8))
    for cycle in sorted(pivot_df.index):
        plt.plot(pivot_df.columns, pivot_df.loc[cycle], label=f'Cycle {cycle}')
    plt.xlabel('Quality Score')
    plt.ylabel('Count')
    plt.title('Quality Score Distribution per Cycle')
    plt.legend(title="Cycle")
    plt.tight_layout()
    plt.savefig(plot_file)
    plt.close()

if heatmap_file:
    # Plot a heatmap with swapped axes: x-axis as cycle and y-axis as quality score.
    plt.figure(figsize=(12, 8))
    # Transpose the pivot table so that cycles become columns and quality scores become rows
    heatmap_data = pivot_df.sort_index().T.values
    img = plt.imshow(heatmap_data, aspect='auto', interpolation='nearest', origin='lower')
    plt.colorbar(img, label='Count')
    plt.xlabel('Cycle')
    plt.ylabel('Quality Score')
    plt.title('Heatmap of Quality Score Distribution per Cycle')
    # Set x-ticks to match cycles
    plt.xticks(ticks=range(len(pivot_df.index)), labels=sorted(pivot_df.index))
    # Set y-ticks to match quality scores
    plt.yticks(ticks=range(len(pivot_df.columns)), labels=pivot_df.columns)
    plt.tight_layout()
    plt.savefig(heatmap_file)
    plt.close()
